/* tslint:disable */
/* eslint-disable */
/**
 * Homebrewer\'s Tools: Core
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Encounter,
    EncounterFromJSON,
    EncounterToJSON,
} from '../models';

export interface Get1Request {
    name: string;
}

export interface InsertRequest {
    encounter: Encounter;
}

/**
 * 
 */
export class EncounterControllerApi extends runtime.BaseAPI {

    /**
     */
    async getRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/encounter/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async get(): Promise<void> {
        await this.getRaw();
    }

    /**
     */
    async get1Raw(requestParameters: Get1Request): Promise<runtime.ApiResponse<Encounter>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling get1.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/encounter/name`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EncounterFromJSON(jsonValue));
    }

    /**
     */
    async get1(requestParameters: Get1Request): Promise<Encounter> {
        const response = await this.get1Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllRaw(): Promise<runtime.ApiResponse<Array<Encounter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/encounter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EncounterFromJSON));
    }

    /**
     */
    async getAll(): Promise<Array<Encounter>> {
        const response = await this.getAllRaw();
        return await response.value();
    }

    /**
     */
    async insertRaw(requestParameters: InsertRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.encounter === null || requestParameters.encounter === undefined) {
            throw new runtime.RequiredError('encounter','Required parameter requestParameters.encounter was null or undefined when calling insert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/encounter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EncounterToJSON(requestParameters.encounter),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async insert(requestParameters: InsertRequest): Promise<void> {
        await this.insertRaw(requestParameters);
    }

}
